import torch
from torch.utils.data import Dataset, DataLoader
from transformers import ReformerTokenizer, ReformerForSequenceClassification

# Assuming you have already loaded your data into a DataFrame called "data"
train_data = data.sample(frac=0.8, random_state=42)  # 80% for training
val_data = data.drop(train_data.index)  # 20% for validation

class TextClassificationDataset(Dataset):
    def __init__(self, data, tokenizer, max_length):
        self.data = data
        self.tokenizer = tokenizer
        self.max_length = max_length

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        comment = self.data['comment'].iloc[idx]
        label = self.data['department'].iloc[idx]

        encoding = self.tokenizer.encode_plus(
            comment,
            add_special_tokens=True,
            max_length=self.max_length,
            padding='max_length',
            truncation=True,
            return_tensors='pt'
        )

        input_ids = encoding['input_ids'].squeeze()
        attention_mask = encoding['attention_mask'].squeeze()

        return {
            'input_ids': input_ids,
            'attention_mask': attention_mask,
            'label': label
        }

tokenizer = ReformerTokenizer.from_pretrained('google/reformer-crime-and-punishment')
model = ReformerForSequenceClassification.from_pretrained('google/reformer-crime-and-punishment')

max_length = 512  # Define the maximum length of input sequences

train_dataset = TextClassificationDataset(train_data, tokenizer, max_length)
val_dataset = TextClassificationDataset(val_data, tokenizer, max_length)

batch_size = 8  # Define the batch size for training and evaluation

train_dataloader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
val_dataloader = DataLoader(val_dataset, batch_size=batch_size)

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

model.to(device)

optimizer = torch.optim.AdamW(model.parameters(), lr=1e-5)
loss_fn = torch.nn.CrossEntropyLoss()

num_epochs = 5  # Define the number of training epochs

for epoch in range(num_epochs):
    model.train()

    for batch in train_dataloader:
        input_ids = batch['input_ids'].to(device)
        attention_mask = batch['attention_mask'].to(device)
        labels = batch['label'].to(device)

        outputs = model(input_ids=input_ids, attention_mask=attention_mask, labels=labels)

        loss = outputs.loss
        logits = outputs.logits

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    model.eval()

    val_loss = 0
    correct_predictions = 0

    with torch.no_grad():
        for batch in val_dataloader:
            input_ids = batch['input_ids'].to(device)
            attention_mask = batch['attention_mask'].to(device)
            labels = batch['label'].to(device)

            outputs = model(input_ids=input_ids, attention_mask=attention_mask, labels=labels)

            loss = outputs.loss
            logits = outputs.logits

            val_loss += loss.item()

            _, predicted_labels = torch.max(logits, dim=1)
            correct_predictions += torch.sum(predicted_labels == labels).item()

    val_loss /= len(val_dataloader)

    accuracy = correct_predictions / len(val_dataset)
    print(f'Epoch {epoch+1}/{num_epochs}, Validation Loss: {val_loss}, Accuracy: {accuracy}')


 def predict_department(comment):
    model.eval()

    encoding = tokenizer.encode_plus(
        comment,
        add_special_tokens=True,
        max_length=max_length,
        padding='max_length',
        truncation=True,
        return_tensors='pt'
    )

    input_ids = encoding['input_ids'].squeeze().to(device)
    attention_mask = encoding['attention_mask'].squeeze().to(device)

    with torch.no_grad():
        outputs = model(input_ids=input_ids.unsqueeze(0), attention_mask=attention_mask.unsqueeze(0))

    logits = outputs.logits
    predicted_label = torch.argmax(logits, dim=1).item()

    return predicted_label


new_comment = "This is a new comment."
predicted_department = predict_department(new_comment)
print(f'Predicted Department: {predicted_department}')
                    








# Load the data into a pandas DataFrame
data = pd.read_csv('data.csv')  # Replace 'data.csv' with your actual data file name

# Split the data into training and testing sets
train_data, test_data = train_test_split(data, test_size=0.2, random_state=42)

# Get the comments and labels from the DataFrame
train_comments = train_data['comment'].tolist()
train_labels = train_data['department'].tolist()

test_comments = test_data['comment'].tolist()
test_labels = test_data['department'].tolist()

# Initialize the Reformer tokenizer
tokenizer = ReformerTokenizer.from_pretrained('google/reformer-crime-and-punishment')

# Tokenize the comments
train_encodings = tokenizer(train_comments, truncation=True, padding=True)
test_encodings = tokenizer(test_comments, truncation=True, padding=True)

# Create a custom PyTorch dataset
class TextClassificationDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

    def __len__(self):
        return len(self.labels)

# Create the training and testing datasets
train_dataset = TextClassificationDataset(train_encodings, train_labels)
test_dataset = TextClassificationDataset(test_encodings, test_labels)

# Initialize the Reformer model for sequence classification
model = ReformerForSequenceClassification.from_pretrained('google/reformer-crime-and-punishment')

# Set up the training arguments
training_args = TrainingArguments(
    output_dir='./results',
    num_train_epochs=3,
    per_device_train_batch_size=8,
    per_device_eval_batch_size=16,
    warmup_steps=500,
    weight_decay=0.01,
    logging_dir='./logs',
    logging_steps=10
)

# Initialize the Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=test_dataset
)

# Train the model
trainer.train()


# Make predictions on the test dataset
predictions = trainer.predict(test_dataset)
predicted_labels = np.argmax(predictions.predictions, axis=1)

# Print the classification report
print(classification_report(test_labels, predicted_labels))



def predict_department(comment):
    encoding = tokenizer([comment], truncation=True, padding=True)
    input_ids = torch.tensor(encoding['input_ids']).unsqueeze(0)
    attention_mask = torch.tensor(encoding['attention_mask']).unsqueeze(0)

    with torch.no_grad():
        logits = model(input_ids=input_ids, attention_mask=attention_mask).logits
        predicted_label = torch.argmax(logits, dim=1).item()
        
    return predicted_label

new_comment = "This is a new comment. Please predict its department."
predicted_department = predict_department(new_comment)
print(predicted_department)
